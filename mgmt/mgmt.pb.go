// Copyright (c) 2020 Pawel Maslanka
// Contact: pawmas.pawelmaslanka@gmail.com
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.0-devel
// 	protoc        v3.11.0
// source: mgmt.proto

package mgmt

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	interfaces "opennos-eth-switch-service/mgmt/interfaces"
	platform "opennos-eth-switch-service/mgmt/platform"
	vlan "opennos-eth-switch-service/mgmt/vlan"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Symbols defined in public import of interfaces/aggregate.proto.

type AggregateIntf = interfaces.AggregateIntf
type CreateAggregateIntfRequest = interfaces.CreateAggregateIntfRequest
type DeleteAggregateIntfRequest = interfaces.DeleteAggregateIntfRequest
type AddEthernetIntfToAggregateIntfRequest = interfaces.AddEthernetIntfToAggregateIntfRequest
type RemoveEthernetIntfFromAggregateIntfRequest = interfaces.RemoveEthernetIntfFromAggregateIntfRequest

// Symbols defined in public import of interfaces/ethernet.proto.

type EthernetIntf = interfaces.EthernetIntf
type AddIpv4AddrToEthernetIntfRequest = interfaces.AddIpv4AddrToEthernetIntfRequest
type RemoveIpv4AddrFromEthernetIntfRequest = interfaces.RemoveIpv4AddrFromEthernetIntfRequest

// Symbols defined in public import of platform/port.proto.

type PortSpeed_Mode = platform.PortSpeed_Mode

const PortSpeed_SPEED_10GB = platform.PortSpeed_SPEED_10GB
const PortSpeed_SPEED_40GB = platform.PortSpeed_SPEED_40GB
const PortSpeed_SPEED_100GB = platform.PortSpeed_SPEED_100GB

var PortSpeed_Mode_name = platform.PortSpeed_Mode_name
var PortSpeed_Mode_value = platform.PortSpeed_Mode_value

type ChannelSpeed_Mode = platform.ChannelSpeed_Mode

const ChannelSpeed_SPEED_10GB = platform.ChannelSpeed_SPEED_10GB
const ChannelSpeed_SPEED_100GB = platform.ChannelSpeed_SPEED_100GB

var ChannelSpeed_Mode_name = platform.ChannelSpeed_Mode_name
var ChannelSpeed_Mode_value = platform.ChannelSpeed_Mode_value

type PortBreakoutRequest_NumChannels = platform.PortBreakoutRequest_NumChannels

const PortBreakoutRequest_MODE_1x = platform.PortBreakoutRequest_MODE_1x
const PortBreakoutRequest_MODE_2x = platform.PortBreakoutRequest_MODE_2x
const PortBreakoutRequest_MODE_4x = platform.PortBreakoutRequest_MODE_4x

var PortBreakoutRequest_NumChannels_name = platform.PortBreakoutRequest_NumChannels_name
var PortBreakoutRequest_NumChannels_value = platform.PortBreakoutRequest_NumChannels_value

type PortSpeed = platform.PortSpeed
type ChannelSpeed = platform.ChannelSpeed
type PortBreakoutRequest = platform.PortBreakoutRequest
type PortBreakoutChanSpeedRequest = platform.PortBreakoutChanSpeedRequest

// Symbols defined in public import of vlan/vlan.proto.

type Vlan_Mode = vlan.Vlan_Mode

const Vlan_ACCESS = vlan.Vlan_ACCESS
const Vlan_NATIVE = vlan.Vlan_NATIVE
const Vlan_TRUNK = vlan.Vlan_TRUNK

var Vlan_Mode_name = vlan.Vlan_Mode_name
var Vlan_Mode_value = vlan.Vlan_Mode_value

type Vlan = vlan.Vlan
type CreateVlanRequest = vlan.CreateVlanRequest
type DeleteVlanRequest = vlan.DeleteVlanRequest
type AddAggregateIntfToVlanRequest = vlan.AddAggregateIntfToVlanRequest
type RemoveAggregateIntfFromVlanRequest = vlan.RemoveAggregateIntfFromVlanRequest
type AddEthernetIntfToVlanRequest = vlan.AddEthernetIntfToVlanRequest
type RemoveEthernetIntfFromVlanRequest = vlan.RemoveEthernetIntfFromVlanRequest

type Result_Status int32

const (
	Result_FAILED  Result_Status = 0
	Result_SUCCESS Result_Status = 1
)

// Enum value maps for Result_Status.
var (
	Result_Status_name = map[int32]string{
		0: "FAILED",
		1: "SUCCESS",
	}
	Result_Status_value = map[string]int32{
		"FAILED":  0,
		"SUCCESS": 1,
	}
)

func (x Result_Status) Enum() *Result_Status {
	p := new(Result_Status)
	*p = x
	return p
}

func (x Result_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_proto_enumTypes[0].Descriptor()
}

func (Result_Status) Type() protoreflect.EnumType {
	return &file_mgmt_proto_enumTypes[0]
}

func (x Result_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Result_Status.Descriptor instead.
func (Result_Status) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{0, 0}
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Result_Status `protobuf:"varint,1,opt,name=status,proto3,enum=opennos.eth.switch.mgmt.Result_Status" json:"status,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetStatus() Result_Status {
	if x != nil {
		return x.Status
	}
	return Result_FAILED
}

var File_mgmt_proto protoreflect.FileDescriptor

var file_mgmt_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6f, 0x70,
	0x65, 0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x1a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x21, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x32,
	0xa3, 0x0b, 0x0a, 0x0d, 0x45, 0x74, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x67, 0x6d,
	0x74, 0x12, 0x53, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74,
	0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x66, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x76, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x66, 0x54, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x66, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66,
	0x54, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73,
	0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x23, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66,
	0x46, 0x72, 0x6f, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x66, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x66, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x19,
	0x41, 0x64, 0x64, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x54, 0x6f, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x54, 0x6f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6e, 0x6f,
	0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x25, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73,
	0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x17, 0x2e, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6c, 0x61,
	0x6e, 0x12, 0x17, 0x2e, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x66, 0x54, 0x6f, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x2e, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x54,
	0x6f, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x28,
	0x2e, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6e,
	0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x54, 0x6f,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x22, 0x2e, 0x76, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x54, 0x6f, 0x56, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6e,
	0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1a, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x66, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x27, 0x2e, 0x76, 0x6c, 0x61, 0x6e,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73, 0x2e, 0x65, 0x74, 0x68,
	0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x6f, 0x70, 0x65, 0x6e, 0x6e, 0x6f, 0x73,
	0x2d, 0x65, 0x74, 0x68, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x50, 0x00, 0x50, 0x01, 0x50, 0x02, 0x50, 0x03,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mgmt_proto_rawDescOnce sync.Once
	file_mgmt_proto_rawDescData = file_mgmt_proto_rawDesc
)

func file_mgmt_proto_rawDescGZIP() []byte {
	file_mgmt_proto_rawDescOnce.Do(func() {
		file_mgmt_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_proto_rawDescData)
	})
	return file_mgmt_proto_rawDescData
}

var file_mgmt_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mgmt_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_mgmt_proto_goTypes = []interface{}{
	(Result_Status)(0),                                            // 0: opennos.eth.switch.mgmt.Result.Status
	(*Result)(nil),                                                // 1: opennos.eth.switch.mgmt.Result
	(*platform.PortBreakoutRequest)(nil),                          // 2: platform.PortBreakoutRequest
	(*platform.PortBreakoutChanSpeedRequest)(nil),                 // 3: platform.PortBreakoutChanSpeedRequest
	(*interfaces.CreateAggregateIntfRequest)(nil),                 // 4: interfaces.CreateAggregateIntfRequest
	(*interfaces.DeleteAggregateIntfRequest)(nil),                 // 5: interfaces.DeleteAggregateIntfRequest
	(*interfaces.AddEthernetIntfToAggregateIntfRequest)(nil),      // 6: interfaces.AddEthernetIntfToAggregateIntfRequest
	(*interfaces.RemoveEthernetIntfFromAggregateIntfRequest)(nil), // 7: interfaces.RemoveEthernetIntfFromAggregateIntfRequest
	(*interfaces.AddIpv4AddrToEthernetIntfRequest)(nil),           // 8: interfaces.AddIpv4AddrToEthernetIntfRequest
	(*interfaces.RemoveIpv4AddrFromEthernetIntfRequest)(nil),      // 9: interfaces.RemoveIpv4AddrFromEthernetIntfRequest
	(*vlan.CreateVlanRequest)(nil),                                // 10: vlan.CreateVlanRequest
	(*vlan.DeleteVlanRequest)(nil),                                // 11: vlan.DeleteVlanRequest
	(*vlan.AddAggregateIntfToVlanRequest)(nil),                    // 12: vlan.AddAggregateIntfToVlanRequest
	(*vlan.RemoveAggregateIntfFromVlanRequest)(nil),               // 13: vlan.RemoveAggregateIntfFromVlanRequest
	(*vlan.AddEthernetIntfToVlanRequest)(nil),                     // 14: vlan.AddEthernetIntfToVlanRequest
	(*vlan.RemoveEthernetIntfFromVlanRequest)(nil),                // 15: vlan.RemoveEthernetIntfFromVlanRequest
}
var file_mgmt_proto_depIdxs = []int32{
	0,  // 0: opennos.eth.switch.mgmt.Result.status:type_name -> opennos.eth.switch.mgmt.Result.Status
	2,  // 1: opennos.eth.switch.mgmt.EthSwitchMgmt.SetPortBreakout:input_type -> platform.PortBreakoutRequest
	3,  // 2: opennos.eth.switch.mgmt.EthSwitchMgmt.SetPortBreakoutChanSpeed:input_type -> platform.PortBreakoutChanSpeedRequest
	4,  // 3: opennos.eth.switch.mgmt.EthSwitchMgmt.CreateAggregateIntf:input_type -> interfaces.CreateAggregateIntfRequest
	5,  // 4: opennos.eth.switch.mgmt.EthSwitchMgmt.DeleteAggregateIntf:input_type -> interfaces.DeleteAggregateIntfRequest
	6,  // 5: opennos.eth.switch.mgmt.EthSwitchMgmt.AddEthernetIntfToAggregateIntf:input_type -> interfaces.AddEthernetIntfToAggregateIntfRequest
	7,  // 6: opennos.eth.switch.mgmt.EthSwitchMgmt.RemoveEthernetIntfFromAggregateIntf:input_type -> interfaces.RemoveEthernetIntfFromAggregateIntfRequest
	8,  // 7: opennos.eth.switch.mgmt.EthSwitchMgmt.AddIpv4AddrToEthernetIntf:input_type -> interfaces.AddIpv4AddrToEthernetIntfRequest
	9,  // 8: opennos.eth.switch.mgmt.EthSwitchMgmt.RemoveIpv4AddrFromEthernetIntfRequest:input_type -> interfaces.RemoveIpv4AddrFromEthernetIntfRequest
	10, // 9: opennos.eth.switch.mgmt.EthSwitchMgmt.CreateVlan:input_type -> vlan.CreateVlanRequest
	11, // 10: opennos.eth.switch.mgmt.EthSwitchMgmt.DeleteVlan:input_type -> vlan.DeleteVlanRequest
	12, // 11: opennos.eth.switch.mgmt.EthSwitchMgmt.AddAggregateIntfToVlan:input_type -> vlan.AddAggregateIntfToVlanRequest
	13, // 12: opennos.eth.switch.mgmt.EthSwitchMgmt.RemoveAggregateIntfFromVlan:input_type -> vlan.RemoveAggregateIntfFromVlanRequest
	14, // 13: opennos.eth.switch.mgmt.EthSwitchMgmt.AddEthernetIntfToVlan:input_type -> vlan.AddEthernetIntfToVlanRequest
	15, // 14: opennos.eth.switch.mgmt.EthSwitchMgmt.RemoveEthernetIntfFromVlan:input_type -> vlan.RemoveEthernetIntfFromVlanRequest
	1,  // 15: opennos.eth.switch.mgmt.EthSwitchMgmt.SetPortBreakout:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 16: opennos.eth.switch.mgmt.EthSwitchMgmt.SetPortBreakoutChanSpeed:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 17: opennos.eth.switch.mgmt.EthSwitchMgmt.CreateAggregateIntf:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 18: opennos.eth.switch.mgmt.EthSwitchMgmt.DeleteAggregateIntf:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 19: opennos.eth.switch.mgmt.EthSwitchMgmt.AddEthernetIntfToAggregateIntf:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 20: opennos.eth.switch.mgmt.EthSwitchMgmt.RemoveEthernetIntfFromAggregateIntf:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 21: opennos.eth.switch.mgmt.EthSwitchMgmt.AddIpv4AddrToEthernetIntf:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 22: opennos.eth.switch.mgmt.EthSwitchMgmt.RemoveIpv4AddrFromEthernetIntfRequest:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 23: opennos.eth.switch.mgmt.EthSwitchMgmt.CreateVlan:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 24: opennos.eth.switch.mgmt.EthSwitchMgmt.DeleteVlan:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 25: opennos.eth.switch.mgmt.EthSwitchMgmt.AddAggregateIntfToVlan:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 26: opennos.eth.switch.mgmt.EthSwitchMgmt.RemoveAggregateIntfFromVlan:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 27: opennos.eth.switch.mgmt.EthSwitchMgmt.AddEthernetIntfToVlan:output_type -> opennos.eth.switch.mgmt.Result
	1,  // 28: opennos.eth.switch.mgmt.EthSwitchMgmt.RemoveEthernetIntfFromVlan:output_type -> opennos.eth.switch.mgmt.Result
	15, // [15:29] is the sub-list for method output_type
	1,  // [1:15] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_mgmt_proto_init() }
func file_mgmt_proto_init() {
	if File_mgmt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mgmt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mgmt_proto_goTypes,
		DependencyIndexes: file_mgmt_proto_depIdxs,
		EnumInfos:         file_mgmt_proto_enumTypes,
		MessageInfos:      file_mgmt_proto_msgTypes,
	}.Build()
	File_mgmt_proto = out.File
	file_mgmt_proto_rawDesc = nil
	file_mgmt_proto_goTypes = nil
	file_mgmt_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EthSwitchMgmtClient is the client API for EthSwitchMgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EthSwitchMgmtClient interface {
	SetPortBreakout(ctx context.Context, in *platform.PortBreakoutRequest, opts ...grpc.CallOption) (*Result, error)
	SetPortBreakoutChanSpeed(ctx context.Context, in *platform.PortBreakoutChanSpeedRequest, opts ...grpc.CallOption) (*Result, error)
	CreateAggregateIntf(ctx context.Context, in *interfaces.CreateAggregateIntfRequest, opts ...grpc.CallOption) (*Result, error)
	DeleteAggregateIntf(ctx context.Context, in *interfaces.DeleteAggregateIntfRequest, opts ...grpc.CallOption) (*Result, error)
	AddEthernetIntfToAggregateIntf(ctx context.Context, in *interfaces.AddEthernetIntfToAggregateIntfRequest, opts ...grpc.CallOption) (*Result, error)
	RemoveEthernetIntfFromAggregateIntf(ctx context.Context, in *interfaces.RemoveEthernetIntfFromAggregateIntfRequest, opts ...grpc.CallOption) (*Result, error)
	AddIpv4AddrToEthernetIntf(ctx context.Context, in *interfaces.AddIpv4AddrToEthernetIntfRequest, opts ...grpc.CallOption) (*Result, error)
	RemoveIpv4AddrFromEthernetIntfRequest(ctx context.Context, in *interfaces.RemoveIpv4AddrFromEthernetIntfRequest, opts ...grpc.CallOption) (*Result, error)
	CreateVlan(ctx context.Context, in *vlan.CreateVlanRequest, opts ...grpc.CallOption) (*Result, error)
	DeleteVlan(ctx context.Context, in *vlan.DeleteVlanRequest, opts ...grpc.CallOption) (*Result, error)
	AddAggregateIntfToVlan(ctx context.Context, in *vlan.AddAggregateIntfToVlanRequest, opts ...grpc.CallOption) (*Result, error)
	RemoveAggregateIntfFromVlan(ctx context.Context, in *vlan.RemoveAggregateIntfFromVlanRequest, opts ...grpc.CallOption) (*Result, error)
	AddEthernetIntfToVlan(ctx context.Context, in *vlan.AddEthernetIntfToVlanRequest, opts ...grpc.CallOption) (*Result, error)
	RemoveEthernetIntfFromVlan(ctx context.Context, in *vlan.RemoveEthernetIntfFromVlanRequest, opts ...grpc.CallOption) (*Result, error)
}

type ethSwitchMgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewEthSwitchMgmtClient(cc grpc.ClientConnInterface) EthSwitchMgmtClient {
	return &ethSwitchMgmtClient{cc}
}

func (c *ethSwitchMgmtClient) SetPortBreakout(ctx context.Context, in *platform.PortBreakoutRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/SetPortBreakout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) SetPortBreakoutChanSpeed(ctx context.Context, in *platform.PortBreakoutChanSpeedRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/SetPortBreakoutChanSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) CreateAggregateIntf(ctx context.Context, in *interfaces.CreateAggregateIntfRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/CreateAggregateIntf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) DeleteAggregateIntf(ctx context.Context, in *interfaces.DeleteAggregateIntfRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/DeleteAggregateIntf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) AddEthernetIntfToAggregateIntf(ctx context.Context, in *interfaces.AddEthernetIntfToAggregateIntfRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/AddEthernetIntfToAggregateIntf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) RemoveEthernetIntfFromAggregateIntf(ctx context.Context, in *interfaces.RemoveEthernetIntfFromAggregateIntfRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/RemoveEthernetIntfFromAggregateIntf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) AddIpv4AddrToEthernetIntf(ctx context.Context, in *interfaces.AddIpv4AddrToEthernetIntfRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/AddIpv4AddrToEthernetIntf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) RemoveIpv4AddrFromEthernetIntfRequest(ctx context.Context, in *interfaces.RemoveIpv4AddrFromEthernetIntfRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/RemoveIpv4AddrFromEthernetIntfRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) CreateVlan(ctx context.Context, in *vlan.CreateVlanRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/CreateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) DeleteVlan(ctx context.Context, in *vlan.DeleteVlanRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/DeleteVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) AddAggregateIntfToVlan(ctx context.Context, in *vlan.AddAggregateIntfToVlanRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/AddAggregateIntfToVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) RemoveAggregateIntfFromVlan(ctx context.Context, in *vlan.RemoveAggregateIntfFromVlanRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/RemoveAggregateIntfFromVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) AddEthernetIntfToVlan(ctx context.Context, in *vlan.AddEthernetIntfToVlanRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/AddEthernetIntfToVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethSwitchMgmtClient) RemoveEthernetIntfFromVlan(ctx context.Context, in *vlan.RemoveEthernetIntfFromVlanRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/opennos.eth.switch.mgmt.EthSwitchMgmt/RemoveEthernetIntfFromVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthSwitchMgmtServer is the server API for EthSwitchMgmt service.
type EthSwitchMgmtServer interface {
	SetPortBreakout(context.Context, *platform.PortBreakoutRequest) (*Result, error)
	SetPortBreakoutChanSpeed(context.Context, *platform.PortBreakoutChanSpeedRequest) (*Result, error)
	CreateAggregateIntf(context.Context, *interfaces.CreateAggregateIntfRequest) (*Result, error)
	DeleteAggregateIntf(context.Context, *interfaces.DeleteAggregateIntfRequest) (*Result, error)
	AddEthernetIntfToAggregateIntf(context.Context, *interfaces.AddEthernetIntfToAggregateIntfRequest) (*Result, error)
	RemoveEthernetIntfFromAggregateIntf(context.Context, *interfaces.RemoveEthernetIntfFromAggregateIntfRequest) (*Result, error)
	AddIpv4AddrToEthernetIntf(context.Context, *interfaces.AddIpv4AddrToEthernetIntfRequest) (*Result, error)
	RemoveIpv4AddrFromEthernetIntfRequest(context.Context, *interfaces.RemoveIpv4AddrFromEthernetIntfRequest) (*Result, error)
	CreateVlan(context.Context, *vlan.CreateVlanRequest) (*Result, error)
	DeleteVlan(context.Context, *vlan.DeleteVlanRequest) (*Result, error)
	AddAggregateIntfToVlan(context.Context, *vlan.AddAggregateIntfToVlanRequest) (*Result, error)
	RemoveAggregateIntfFromVlan(context.Context, *vlan.RemoveAggregateIntfFromVlanRequest) (*Result, error)
	AddEthernetIntfToVlan(context.Context, *vlan.AddEthernetIntfToVlanRequest) (*Result, error)
	RemoveEthernetIntfFromVlan(context.Context, *vlan.RemoveEthernetIntfFromVlanRequest) (*Result, error)
}

// UnimplementedEthSwitchMgmtServer can be embedded to have forward compatible implementations.
type UnimplementedEthSwitchMgmtServer struct {
}

func (*UnimplementedEthSwitchMgmtServer) SetPortBreakout(context.Context, *platform.PortBreakoutRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortBreakout not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) SetPortBreakoutChanSpeed(context.Context, *platform.PortBreakoutChanSpeedRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortBreakoutChanSpeed not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) CreateAggregateIntf(context.Context, *interfaces.CreateAggregateIntfRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAggregateIntf not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) DeleteAggregateIntf(context.Context, *interfaces.DeleteAggregateIntfRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAggregateIntf not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) AddEthernetIntfToAggregateIntf(context.Context, *interfaces.AddEthernetIntfToAggregateIntfRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEthernetIntfToAggregateIntf not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) RemoveEthernetIntfFromAggregateIntf(context.Context, *interfaces.RemoveEthernetIntfFromAggregateIntfRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEthernetIntfFromAggregateIntf not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) AddIpv4AddrToEthernetIntf(context.Context, *interfaces.AddIpv4AddrToEthernetIntfRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpv4AddrToEthernetIntf not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) RemoveIpv4AddrFromEthernetIntfRequest(context.Context, *interfaces.RemoveIpv4AddrFromEthernetIntfRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIpv4AddrFromEthernetIntfRequest not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) CreateVlan(context.Context, *vlan.CreateVlanRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVlan not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) DeleteVlan(context.Context, *vlan.DeleteVlanRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVlan not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) AddAggregateIntfToVlan(context.Context, *vlan.AddAggregateIntfToVlanRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAggregateIntfToVlan not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) RemoveAggregateIntfFromVlan(context.Context, *vlan.RemoveAggregateIntfFromVlanRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAggregateIntfFromVlan not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) AddEthernetIntfToVlan(context.Context, *vlan.AddEthernetIntfToVlanRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEthernetIntfToVlan not implemented")
}
func (*UnimplementedEthSwitchMgmtServer) RemoveEthernetIntfFromVlan(context.Context, *vlan.RemoveEthernetIntfFromVlanRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEthernetIntfFromVlan not implemented")
}

func RegisterEthSwitchMgmtServer(s *grpc.Server, srv EthSwitchMgmtServer) {
	s.RegisterService(&_EthSwitchMgmt_serviceDesc, srv)
}

func _EthSwitchMgmt_SetPortBreakout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(platform.PortBreakoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).SetPortBreakout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/SetPortBreakout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).SetPortBreakout(ctx, req.(*platform.PortBreakoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_SetPortBreakoutChanSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(platform.PortBreakoutChanSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).SetPortBreakoutChanSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/SetPortBreakoutChanSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).SetPortBreakoutChanSpeed(ctx, req.(*platform.PortBreakoutChanSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_CreateAggregateIntf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interfaces.CreateAggregateIntfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).CreateAggregateIntf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/CreateAggregateIntf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).CreateAggregateIntf(ctx, req.(*interfaces.CreateAggregateIntfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_DeleteAggregateIntf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interfaces.DeleteAggregateIntfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).DeleteAggregateIntf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/DeleteAggregateIntf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).DeleteAggregateIntf(ctx, req.(*interfaces.DeleteAggregateIntfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_AddEthernetIntfToAggregateIntf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interfaces.AddEthernetIntfToAggregateIntfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).AddEthernetIntfToAggregateIntf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/AddEthernetIntfToAggregateIntf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).AddEthernetIntfToAggregateIntf(ctx, req.(*interfaces.AddEthernetIntfToAggregateIntfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_RemoveEthernetIntfFromAggregateIntf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interfaces.RemoveEthernetIntfFromAggregateIntfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).RemoveEthernetIntfFromAggregateIntf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/RemoveEthernetIntfFromAggregateIntf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).RemoveEthernetIntfFromAggregateIntf(ctx, req.(*interfaces.RemoveEthernetIntfFromAggregateIntfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_AddIpv4AddrToEthernetIntf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interfaces.AddIpv4AddrToEthernetIntfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).AddIpv4AddrToEthernetIntf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/AddIpv4AddrToEthernetIntf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).AddIpv4AddrToEthernetIntf(ctx, req.(*interfaces.AddIpv4AddrToEthernetIntfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_RemoveIpv4AddrFromEthernetIntfRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interfaces.RemoveIpv4AddrFromEthernetIntfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).RemoveIpv4AddrFromEthernetIntfRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/RemoveIpv4AddrFromEthernetIntfRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).RemoveIpv4AddrFromEthernetIntfRequest(ctx, req.(*interfaces.RemoveIpv4AddrFromEthernetIntfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_CreateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.CreateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).CreateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/CreateVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).CreateVlan(ctx, req.(*vlan.CreateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_DeleteVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.DeleteVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).DeleteVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/DeleteVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).DeleteVlan(ctx, req.(*vlan.DeleteVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_AddAggregateIntfToVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.AddAggregateIntfToVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).AddAggregateIntfToVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/AddAggregateIntfToVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).AddAggregateIntfToVlan(ctx, req.(*vlan.AddAggregateIntfToVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_RemoveAggregateIntfFromVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.RemoveAggregateIntfFromVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).RemoveAggregateIntfFromVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/RemoveAggregateIntfFromVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).RemoveAggregateIntfFromVlan(ctx, req.(*vlan.RemoveAggregateIntfFromVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_AddEthernetIntfToVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.AddEthernetIntfToVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).AddEthernetIntfToVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/AddEthernetIntfToVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).AddEthernetIntfToVlan(ctx, req.(*vlan.AddEthernetIntfToVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthSwitchMgmt_RemoveEthernetIntfFromVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.RemoveEthernetIntfFromVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthSwitchMgmtServer).RemoveEthernetIntfFromVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opennos.eth.switch.mgmt.EthSwitchMgmt/RemoveEthernetIntfFromVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthSwitchMgmtServer).RemoveEthernetIntfFromVlan(ctx, req.(*vlan.RemoveEthernetIntfFromVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EthSwitchMgmt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opennos.eth.switch.mgmt.EthSwitchMgmt",
	HandlerType: (*EthSwitchMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPortBreakout",
			Handler:    _EthSwitchMgmt_SetPortBreakout_Handler,
		},
		{
			MethodName: "SetPortBreakoutChanSpeed",
			Handler:    _EthSwitchMgmt_SetPortBreakoutChanSpeed_Handler,
		},
		{
			MethodName: "CreateAggregateIntf",
			Handler:    _EthSwitchMgmt_CreateAggregateIntf_Handler,
		},
		{
			MethodName: "DeleteAggregateIntf",
			Handler:    _EthSwitchMgmt_DeleteAggregateIntf_Handler,
		},
		{
			MethodName: "AddEthernetIntfToAggregateIntf",
			Handler:    _EthSwitchMgmt_AddEthernetIntfToAggregateIntf_Handler,
		},
		{
			MethodName: "RemoveEthernetIntfFromAggregateIntf",
			Handler:    _EthSwitchMgmt_RemoveEthernetIntfFromAggregateIntf_Handler,
		},
		{
			MethodName: "AddIpv4AddrToEthernetIntf",
			Handler:    _EthSwitchMgmt_AddIpv4AddrToEthernetIntf_Handler,
		},
		{
			MethodName: "RemoveIpv4AddrFromEthernetIntfRequest",
			Handler:    _EthSwitchMgmt_RemoveIpv4AddrFromEthernetIntfRequest_Handler,
		},
		{
			MethodName: "CreateVlan",
			Handler:    _EthSwitchMgmt_CreateVlan_Handler,
		},
		{
			MethodName: "DeleteVlan",
			Handler:    _EthSwitchMgmt_DeleteVlan_Handler,
		},
		{
			MethodName: "AddAggregateIntfToVlan",
			Handler:    _EthSwitchMgmt_AddAggregateIntfToVlan_Handler,
		},
		{
			MethodName: "RemoveAggregateIntfFromVlan",
			Handler:    _EthSwitchMgmt_RemoveAggregateIntfFromVlan_Handler,
		},
		{
			MethodName: "AddEthernetIntfToVlan",
			Handler:    _EthSwitchMgmt_AddEthernetIntfToVlan_Handler,
		},
		{
			MethodName: "RemoveEthernetIntfFromVlan",
			Handler:    _EthSwitchMgmt_RemoveEthernetIntfFromVlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mgmt.proto",
}
